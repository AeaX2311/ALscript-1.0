const gramaticasIf = {
  S: [
    "IN_ASIGNACION",
    "IN_SI",
    "IN_CICLO",
    "IN_MIENTRAS",
    "IN_SEGUN",
    "IN_IO",
    "IN_COMENTARIO"
  ],

  VAL_CONSTANTE: [
    "CONSTENT",
    "CONSTEX",
    "CONSTRE"
  ],

  VAL_BOLEANO:[
    "PRB1",
    "PRB2"
  ],

  VALOR1: [
    "CADENA",
  ],

  VALOR2:[
    "CADENA"
  ],

  IN_IO: [
    "PRI4 IDEN CE13", //leer <iden>
    "PRI5 VAL5 CE13"  // imprimir <val>
  ],

  IN_COMENTARIO: [
    "COMENTARIO"
  ],

  IN_AUXILIARES: [
    "CE8", //{
    "CE9 CE13", //};
  ],

  IN_ASIGNACION: [
    //DECLARAR VARIABLE v1;
    "PRI6 PRV1 IDEN CE13",
    //DECLARAR Y ASIGNAR
    "PRI6 PRV1 IDEN ASIG VAL_CONSTANTE CE13",
    "PRI6 PRV1 IDEN ASIG VAL_BOLEANO CE13",
    "PRI6 PRV1 IDEN ASIG VALOR CE13",
    "PRI6 PRV1 IDEN ASIG OP_ARITMETICA CE13",
    "PRI6 PRV1 IDEN ASIG OP_CADENA_CONCATENACION CE13",
    "PRI6 PRV1 IDEN ASIG OP_CONDICION CE13",
    //ASIGNAR
    "IDEN ASIG VAL_CONSTANTE CE13",
    "IDEN ASIG VALOR CE13",
    "IDEN ASIG VAL_BOLEANO CE13",
    "IDEN ASIG OP_ARITMETICA CE13",
    "IDEN ASIG OP_CADENA_CONCATENACION CE13",
    "IDEN ASIG OP_CONDICION CE13",  ],

  IN_SI: [
    "PRI2 CE6 OP_CONDICION CE7", //IF ( VALOR )
    "PRI2 CE6 IDEN CE7", //IF ( IDEN )
    "PRI3" /*ELSE*/, "CE8", "CE9", //ELSE { }
    "PRI3 PRI2 CE6 OP_CONDICION CE7",  // ELSE IF ( VALOR ) //TODO RESULTADO (ARITMETICO, RELACIONAL, LOGICO) ES UN VALOR
    "PRI3 PRI2 CE6 IDEN CE7", //ELSE IF ( IDEN )
  ],

  IN_CICLO: [
    "PRI1 CE6 IDEN CE13 OP_CONDICION CE13 IDEN CE7" /*CICLO ( IDEN = 0 ; IDEN < 1 ; IDEN = IDEN + 1 )*/, //IDEN < 1 ES UN RESULTADO LOGICO POR LO TANTO ES UN VALOR
  ],

  IN_MIENTRAS: [
    "PRI18" /*HACER*/,
    "PRI17 CE6 OP_CONDICION CE6" /*MIENTRAS ( VALOR )*/,
  ],

  IN_SEGUN: [
    "PRI7 CE6 IDEN CE7", //SEGUN ( IDEN ) //IDEN TAMBIEN ES UN VALOR PERO UN VALOR SE PUEDE ASIGNAR A UN IDEN, MIENTRAS QUE UN IDEN NO SE PUEDE ASIGNAR A UN VALOR, POR ESO IDEN ES TOP
    "PRI8 VALOR OPR2" /*CASO VALOR >*/, //POR ESO VALOR TIENE CIERTOS CASOS DE USO MIENTRAS OTROS, PUES EN MUCHOS CASOS SE REQUIERE DE VALORES CONSTANTES Y NO VARIABLES COMO LOS IDEN
    "PRI12 OPR2" /*DEFECTO >*/ //EN ESTE CASO DEFECTO NO REQUIERE VALOR, ES EL DEFECTO
  ],

  AUX_OPA:[
    "OPA1",
    "OPA2",
    "OPA3",
    "OPA4",
    "OPA5",
    "OPA6",
  ],

  OP_ARITMETICA: [
    "VAL_CONSTANTE AUX_OPA VAL_CONSTANTE", 
    "IDEN AUX_OPA IDEN",
    "IDEN AUX_OPA VAL_CONSTANTE",
    "VAL_CONSTANTE AUX_OPA IDEN",
    "OP_ARITMETICA AUX_OPA OP_ARITMETICA",
    "IDEN AUX_OPA OP_ARITMETICA",
    "OP_ARITMETICA AUX_OPA IDEN",
    "VAL_CONSTANTE AUX_OPA OP_ARITMETICA",
    "OP_ARITMETICA AUX_OPA VAL_CONSTANTE",
    "CE6 OP_ARITMETICA CE7"
  ],

  AUX_OPR:[
    "OPR1",
    "OPR2",
    "OPR3",
    "OPR4",
    "OPR5",
    "OPR6",
  ],

  OP_RELACIONAL: [
    "VAL_CONSTANTE AUX_OPR VAL_CONSTANTE",  
    "IDEN AUX_OPR IDEN", 
    "VALOR AUX_OPR VALOR", 
    "IDEN AUX_OPR VAL_CONSTANTE",     
    "VAL_CONSTANTE AUX_OPR IDEN",
    "VALOR AUX_OPR VAL_CONSTANTE",
      "VALOR AUX_OPR IDEN",
    "IDEN AUX_OPR VALOR",
    "VAL_CONSTANTE AUX_OPR VALOR",
    "OP_ARITMETICA AUX_OPR OP_ARITMETICA", 
  ],

  OP_LOGICA: [
    //NOT
    "OPL1 VAL_BOLEANO", //SIN PARENTESIS
    "CE6 OPL1 VAL_BOLEANO CE7", //CON PARENTESIS
    "OPL1 VAL_BOLEANO", 
    "CE6 OPL1 VAL_BOLEANO CE7",
    "OPL1 IDEN",
    "CE6 OPL1 IDEN CE7",
    "OPL1 VALOR",
    "CE6 OPL1 VALOR CE7",
    //AND
    "VALOR OPL3 VALOR",
    "IDEN OPL3 IDEN",
    "VAL_BOLEANO OPL3 VAL_BOLEANO",
    "VAL_BOLEANO OPL3 VAL_BOLEANO",
    "VALOR OPL3 IDEN",
    "VALOR OPL3 VAL_BOLEANO",
    "VALOR OPL3 VAL_BOLEANO",
    "IDEN OPL3 VALOR",
    "IDEN OPL3 VAL_BOLEANO",
    "IDEN OPL3 VAL_BOLEANO",
    "VAL_BOLEANO OPL3 VALOR",
    "VAL_BOLEANO OPL3 IDEN",
    "VAL_BOLEANO OPL3 VAL_BOLEANO",
    "VAL_BOLEANO OPL3 VALOR",
    "VAL_BOLEANO OPL3 IDEN",
    "VAL_BOLEANO OPL3 VAL_BOLEANO",
    //OR
    "VALOR OPL2 VALOR",
    "IDEN OPL2 IDEN",
    "VAL_BOLEANO OPL2 VAL_BOLEANO",
    "VAL_BOLEANO OPL2 VAL_BOLEANO",
    "VALOR OPL2 IDEN",
    "VALOR OPL2 VAL_BOLEANO",
    "VALOR OPL2 VAL_BOLEANO",
    "IDEN OPL2 VALOR",
    "IDEN OPL2 VAL_BOLEANO",
    "IDEN OPL2 VAL_BOLEANO",
    "VAL_BOLEANO OPL2 VALOR",
    "VAL_BOLEANO OPL2 IDEN",
    "VAL_BOLEANO OPL2 VAL_BOLEANO",
    "VAL_BOLEANO OPL2 VALOR",
    "VAL_BOLEANO OPL2 IDEN",
    "VAL_BOLEANO OPL2 VAL_BOLEANO",//NOT
    "OPL1 VAL_BOLEANO", //SIN PARENTESIS
    "CE6 OPL1 VAL_BOLEANO CE7", //CON PARENTESIS
    "OPL1 VAL_BOLEANO", 
    "CE6 OPL1 VAL_BOLEANO CE7",
    "OPL1 IDEN",
    "CE6 OPL1 IDEN CE7",
    "OPL1 VALOR",
    "CE6 OPL1 VALOR CE7",
    //AND
    "VALOR OPL3 VALOR",
    "IDEN OPL3 IDEN",
    "VAL_BOLEANO OPL3 VAL_BOLEANO",
    "VAL_BOLEANO OPL3 VAL_BOLEANO",
    "VALOR OPL3 IDEN",
    "VALOR OPL3 VAL_BOLEANO",
    "VALOR OPL3 VAL_BOLEANO",
    "IDEN OPL3 VALOR",
    "IDEN OPL3 VAL_BOLEANO",
    "IDEN OPL3 VAL_BOLEANO",
    "VAL_BOLEANO OPL3 VALOR",
    "VAL_BOLEANO OPL3 IDEN",
    "VAL_BOLEANO OPL3 VAL_BOLEANO",
    "VAL_BOLEANO OPL3 VALOR",
    "VAL_BOLEANO OPL3 IDEN",
    "VAL_BOLEANO OPL3 VAL_BOLEANO",
    //OR
    "VALOR OPL2 VALOR",
    "IDEN OPL2 IDEN",
    "VAL_BOLEANO OPL2 VAL_BOLEANO",
    "VAL_BOLEANO OPL2 VAL_BOLEANO",
    "VALOR OPL2 IDEN",
    "VALOR OPL2 VAL_BOLEANO",
    "VALOR OPL2 VAL_BOLEANO",
    "IDEN OPL2 VALOR",
    "IDEN OPL2 VAL_BOLEANO",
    "IDEN OPL2 VAL_BOLEANO",
    "VAL_BOLEANO OPL2 VALOR",
    "VAL_BOLEANO OPL2 IDEN",
    "VAL_BOLEANO OPL2 VAL_BOLEANO",
    "VAL_BOLEANO OPL2 VALOR",
    "VAL_BOLEANO OPL2 IDEN",
    "VAL_BOLEANO OPL2 VAL_BOLEANO",

    "VAL_CONSTANTE OPL2 VAL_CONSTANTE", //OR
    "VAL_CONSTANTE OPL3 VAL_CONSTANTE", //AND
    "CE6 VAL_CONSTANTE CE7",
    "IDEN OPL2 IDEN", //OR
    "IDEN OPL3 IDEN", //AND
    "CE6 IDEN CE7",
    "VALOR OPL2 VALOR", //OR
    "VALOR OPL3 VALOR", //AND
    "IDEN OPL2 VAL_CONSTANTE", //OR
    "IDEN OPL3 VAL_CONSTANTE", //AND
    "VAL_CONSTANTE OPL2 IDEN", //OR
    "VAL_CONSTANTE OPL3 IDEN", //AND
    "VALOR OPL2 VAL_CONSTANTE", //OR
    "VALOR OPL3 VAL_CONSTANTE", //AND
    "VAL_CONSTANTE OPL2 VALOR", //OR
    "VAL_CONSTANTE OPL3 VALOR", //AND
    "VALOR OPL2 IDEN", //OR
    "VALOR OPL3 IDEN", //AND
    "IDEN OPL2 VALOR", //OR
    "IDEN OPL3 VALOR", //AND
    "CE6 VALOR CE7", 
  ],

  OP_CADENA_CONCATENACION:[
    "CADENA OPA1 CADENA",
    "CADENA OPA1 IDEN",
    "CADENA OPA1 VALOR",
    "IDEN OPA1 CADENA",
    "VALOR OPA1 CADENA",
    "CE6 CADENA CE7" 
  ],

  OP_CADENA_COMPARACION: [
    "CADENA AUX_OPR CADENA",
    "CADENA AUX_OPR IDEN",
    "IDEN AUX_OPR CADENA",
    "CADENA AUX_OPR VALOR",
    "VALOR AUX_OPR CADENA", 
  ],

  OP_CONDICION: [
    "OP_RELACIONAL",
    "OP_LOGICA",
    "OP_CADENA_COMPARACION",
    "OP_RELACIONAL OP_LOGICA OP_RELACIONAL"
  ]
};

let evaluacionSintaxis = "";
const reduceCadena = (origen, puntero, fin, nuevo) => {
  const origenTokens = origen.split(" ");
  return origenTokens.slice(0, puntero).concat([`${nuevo}`]).concat(origenTokens.slice(fin, origenTokens.length)).join(" ");
}

function recorridoCadenaTokens(tokensInput) {
  let tokensInputToArray = tokensInput.split(" "), longitudTokens = tokensInputToArray.length;
  evaluacionSintaxis += "-->  " + tokensInput + "\n";

  for (let contLongitud = longitudTokens - 1; contLongitud >= 0; contLongitud--) {
    for (const [k, v] of Object.entries(gramaticasIf)) {
      for (let puntero = 0; puntero < longitudTokens - contLongitud; puntero++) {
        const fin = contLongitud + puntero + 1;
        if (v.find((e) => e === tokensInputToArray.slice(puntero, fin).join(" "))) {
          tokensInput = reduceCadena(tokensInput, puntero, fin, k);
          return tokensInput === "S" ? tokensInput : recorridoCadenaTokens(tokensInput);
        }
      }
    }
  }
  
  return tokensInput;
}

  let loquelei = `CONSTENT OPA1 CONSTENT
  CONSTEX OPA1 CONSTENT OPA1 CONSTRE
  PRI6 PRV1 IDEN ASIG CONSTENT OPA2 CONSTENT OPA3 CONSTENT OPA2 CONSTENT OPA3 CE6 CONSTENT OPA2 CONSTENT OPA1 CONSTENT CE7 CE13`;

for (const linea of loquelei.split("\n")) {
  if(recorridoCadenaTokens(linea) === "S") evaluacionSintaxis += "-->  S\n\n";
  else evaluacionSintaxis += "-->  ERR\n\n";
}

console.log(evaluacionSintaxis);